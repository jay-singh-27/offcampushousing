name: Deploy to DOKS

on:
  push:
    branches: [ main, feature/deploy ]
    paths:
      - 'backend/**'
      - 'k8s/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'k8s/**'
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: offcampus-housing/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200

    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Save DigitalOcean kubeconfig
      run: |
        doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

    - name: Deploy to Kubernetes
      run: |
        # Apply namespace first
        kubectl apply -f k8s/namespace.yaml
        
        # Create/update secrets
        kubectl create secret generic offcampus-housing-secrets \
          --namespace=offcampus-housing \
          --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
          --from-literal=STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
          --from-literal=SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          --from-literal=SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_KEY }}" \
          --from-literal=NODE_ENV="production" \
          --from-literal=PORT="3000" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply all other manifests
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/networkpolicy.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Update the image
        kubectl set image deployment/offcampus-housing-backend \
          backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --namespace=offcampus-housing
        
        # Wait for rollout to complete
        kubectl rollout status deployment/offcampus-housing-backend \
          --namespace=offcampus-housing \
          --timeout=600s

    - name: Verify deployment
      run: |
        echo "=== Services ==="
        kubectl get services --namespace=offcampus-housing
        echo "=== Pods ==="
        kubectl get pods --namespace=offcampus-housing
        echo "=== Ingress ==="
        kubectl get ingress --namespace=offcampus-housing
        echo "=== Pod Logs ==="
        kubectl logs -l app=offcampus-housing-backend --namespace=offcampus-housing --tail=20

    - name: Run health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Get the external IP
        EXTERNAL_IP=$(kubectl get service offcampus-housing-backend-service --namespace=offcampus-housing -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$EXTERNAL_IP" ]; then
          echo "Testing health endpoint at $EXTERNAL_IP"
          curl -f http://$EXTERNAL_IP/health || echo "Health check failed, but deployment may still be successful"
        else
          echo "No external IP found yet, checking pod health instead"
          kubectl get pods --namespace=offcampus-housing
        fi

  test-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
